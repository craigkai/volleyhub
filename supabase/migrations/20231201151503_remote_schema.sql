drop policy "Allow users to edit their own profiles" on "public"."profile";

drop policy "Enable read access for all users for active teams" on "public"."team";

drop policy "Allow users to edit their own memberships" on "public"."team_member";

alter table "public"."game" drop constraint "game_team1_fkey";

alter table "public"."game" drop constraint "game_team2_fkey";

alter table "public"."profile" drop constraint "profile_user_id_fkey";

alter table "public"."schedule" drop constraint "schedule_event_id_fkey";

alter table "public"."team_member" drop constraint "team_member_team_id_fkey";

alter table "public"."team_member" drop constraint "team_member_user_id_fkey";

alter table "public"."events" drop constraint "events_owner_fkey";

alter table "public"."game" drop constraint "game_pkey";

alter table "public"."profile" drop constraint "profile_pkey";

alter table "public"."schedule" drop constraint "schedule_pkey";

alter table "public"."team" drop constraint "team_pkey";

alter table "public"."team_member" drop constraint "team_member_pkey";

drop index if exists "public"."profile_pkey";

drop index if exists "public"."schedule_pkey";

drop index if exists "public"."team_member_pkey";

drop index if exists "public"."game_pkey";

drop index if exists "public"."team_pkey";

drop table "public"."game";

drop table "public"."profile";

drop table "public"."schedule";

drop table "public"."team";

drop table "public"."team_member";

create table "public"."matches" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "team1" bigint not null,
    "team2" bigint not null,
    "team1_score" bigint,
    "team2_score" bigint,
    "status" text default 'active'::text,
    "event_id" bigint not null
);


alter table "public"."matches" enable row level security;

create table "public"."teams" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone default now(),
    "name" text not null,
    "state" text default 'active'::text,
    "division" text
);


alter table "public"."teams" enable row level security;

CREATE UNIQUE INDEX game_pkey ON public.matches USING btree (id);

CREATE UNIQUE INDEX team_pkey ON public.teams USING btree (id);

alter table "public"."matches" add constraint "game_pkey" PRIMARY KEY using index "game_pkey";

alter table "public"."teams" add constraint "team_pkey" PRIMARY KEY using index "team_pkey";

alter table "public"."matches" add constraint "matches_event_id_fkey" FOREIGN KEY (event_id) REFERENCES events(id) not valid;

alter table "public"."matches" validate constraint "matches_event_id_fkey";

alter table "public"."matches" add constraint "matches_team1_fkey" FOREIGN KEY (team1) REFERENCES teams(id) not valid;

alter table "public"."matches" validate constraint "matches_team1_fkey";

alter table "public"."matches" add constraint "matches_team2_fkey" FOREIGN KEY (team2) REFERENCES teams(id) not valid;

alter table "public"."matches" validate constraint "matches_team2_fkey";

alter table "public"."events" add constraint "events_owner_fkey" FOREIGN KEY (owner) REFERENCES auth.users(id) not valid;

alter table "public"."events" validate constraint "events_owner_fkey";

create policy "Enable insert for authenticated users only"
on "public"."events"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable update for users based on email"
on "public"."events"
as permissive
for all
to authenticated
using ((auth.uid() = owner))
with check ((auth.uid() = owner));


create policy "Enable read access for all users"
on "public"."matches"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users for active teams"
on "public"."teams"
as permissive
for select
to public
using ((state = 'active'::text));



